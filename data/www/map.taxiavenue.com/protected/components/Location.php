<?php/** *  */class Location {        public $lat;    public $lng;    public $bounds;    public $city;    public $region;    public $country;        private static $_geoService;        private static function _checkCoordinates($coordinates){        if(empty($coordinates)){            throw new Exception("Не переданы координаты местоположения.");        }        elseif(!isset($coordinates[0]) || !isset($coordinates[1])){            throw new Exception("Переданы не все координаты местоположения.");        }    }        public static function setFromGeocoding($geoLocation){        if(empty($geoLocation)){            throw new Exception("Не переданы данные геокодирования.");        }        self::_checkCoordinates($geoLocation['coordinates']);                $location = new Location();        $location->lat = $geoLocation['coordinates'][0];        $location->lng = $geoLocation['coordinates'][1];        $location->bounds = $geoLocation['bounds'];        $location->_findLocationInDbByGeocodingData($geoLocation);                return $location;    }        /*======================================================================*/    public static function setFromSearchString($address){                self::$_geoService = new GeoService();        $geoResult = self::$_geoService->geocode($address);        if(!$geoResult or empty($geoResult['city'])){            return FALSE;        }                //var_dump($geoResult);        $location = new Location();        $location->lat = $geoResult['coordinates'][0];        $location->lng = $geoResult['coordinates'][1];        $location->bounds = $geoResult['bounds'];                // Пробуем найти в БД, если нет - то сохраняем        $location->_findLocationInDbByGeocodingData($geoResult);        return $location;    }        /*======================================================================*/        private function _findLocationInDbByGeocodingData($geoLocation)    {        $coutry_en = $geoLocation['country'];        $region_en = $geoLocation['region'];        $city_en = $geoLocation['city'];        $geoService = new GeoService();        $names_ru = $geoService->translateEnRu(array($coutry_en, $region_en, $city_en));        // Бывает, что не может перевести        if (!$names_ru) {            //throw new CHttpException(404,'Города с таким названием не существует.');            $names_ru = array($coutry_en, $region_en, $city_en);        }        //$this->country = $this->_findCountryByGeocodingName($geoLocation['country']);        $this->country = $this->_findCountryByGeocodingName($names_ru[0]);        // Сохраняем в БД страну, регион, город        if (!$this->country) {                        //$this->country = $this->_saveCountry($geoLocation, $geoLocation['country']);            $this->country = $this->_saveCountry($geoLocation, $names_ru[0]);            $this->region = $this->_saveRegion($geoLocation, $this->country->id, $names_ru[1]);            $this->city = $this->_saveCity($geoLocation, $this->region->id, $names_ru[2]);                        return;        }                $this->region = $this->_findRegionByGeocodingNameAndCountryId($geoLocation['region'], $this->country->id);        // Сохраняем в БД регион, город        if (!$this->region) {                        $this->region = $this->_saveRegion($geoLocation, $this->country->id, $names_ru[1]);            $this->city = $this->_saveCity($geoLocation, $this->region->id, $names_ru[2]);                        return;        }                $this->city = $this->_findCityByGeocodingNameAndRegionId($geoLocation['city'], $this->region->id);        // Сохраняем в БД город        if (!$this->city) {                        $this->city = $this->_saveCity($geoLocation, $this->region->id, $names_ru[2]);                    }    }    private function _findCountryByGeocodingName($name)    {         $criteria = new CDbCriteria;        $criteria->condition = 'name_en=:name OR name_ru=:name';        $criteria->params=array( ':name'=>$name );        $country = Country::model()->find($criteria);        return empty($country) ? FALSE : $country;    }    private function _findRegionByGeocodingNameAndCountryId($name, $countryId = NULL)    {        if(!empty($countryId)){            $criteria = new CDbCriteria;            $criteria->condition = '(name_en=:name OR name_ru=:name) AND id_country=:id_country';            $criteria->params = array( ':name'=>$name, 'id_country'=>$countryId);            $region = Region::model()->find($criteria);                        /**             * Дополнительно проверяем наличие клона-региона в базе             * Потому что используются яндекс и гуугл геокодирование             * пример - Respublika_bashkortostan != Republic of Bashkortostan             */            if (!empty($region)){                $cr = new CDbCriteria;                $cr->condition = 'lat=' . $region->lat . ' AND lng=' . $region->lng;                $dopRegion = Region::model()->find($cr);                if (!empty($dopRegion)) $region = $dopRegion;            }        }        return empty($region) ? FALSE : $region;    }    private function _findCityByGeocodingNameAndRegionId($name, $regionId)    {        if(!empty($regionId)){            $criteria = new CDbCriteria;            $criteria->condition = '(name_en=:name OR name_ru=:name) AND id_region=:id_region';            $criteria->params = array( ':name'=>$name, 'id_region'=>$regionId );            $city = City::model()->find($criteria);        }        return empty($city) ? FALSE : $city;    }    /*     * Сохранить в БД страну, регион, город     */    private function _saveCountry($geoLocation, $country_ru) {        $geoService = new GeoService();        $geoCountry = $geoService->geocode($geoLocation['country']);                if (!$geoCountry) {            throw new Exception();        }                $coutry = new Country();        $coutry->name_en = $geoLocation['country'];        $coutry->name_ru = $country_ru;        $coutry->lat = $geoCountry['coordinates'][0];        $coutry->lng = $geoCountry['coordinates'][1];                $coutry->save();                return $coutry;    }        /*     * Сохранить в БД регион, город     */    private function _saveRegion($geoLocation, $countryId, $region_ru) {        $geoService = new GeoService();        $geoRegion = $geoService->geocode($geoLocation['region']);                if (!$geoRegion) {            throw new Exception();        }                $region = new Region();        $region->id_country = $countryId;        $region->name_en = $geoLocation['region'];        $region->name_ru = $region_ru;        $region->lat = $geoRegion['coordinates'][0];        $region->lng = $geoRegion['coordinates'][1];                $region->save();                return $region;    }        /*     * Сохранить в БД город     */    private function _saveCity($geoLocation, $regionId, $city_ru) {        $geoService = new GeoService();        $geoCity = $geoService->geocode($geoLocation['city']);                if (!$geoCity) {            throw new Exception();        }        $city = new City();        $city->id_region = $regionId;        $city->name_en = $geoLocation['city'];        $city->name_ru = $city_ru;        $city->lat = $geoCity['coordinates'][0];        $city->lng = $geoCity['coordinates'][1];        $city->northeast_lat = $geoCity['bounds'][0][0];        $city->northeast_lng = $geoCity['bounds'][0][1];        $city->southwest_lat = $geoCity['bounds'][1][0];        $city->southwest_lng = $geoCity['bounds'][1][1];                $city->save();                return $city;    }    private function __construct() {}    public function toJSON(){        return CJSON::encode($this->toArray());    }    public function toArray(){        return array(            'coordinates'=> $this->getCoordinates(),            'bounds'=> $this->bounds,            'city'=> empty($this->city) ? FALSE : $this->city->getAttributes(true, true),            'region'=> empty($this->region) ? FALSE : $this->region->getAttributes(),            'country'=> empty($this->country) ? FALSE : $this->country->getAttributes()        );    }        public function getCoordinates(){        return array( 'lat'=> $this->lat, 'lng'=> $this->lng );    }}