<?php/** *  */class GoogleGeoService implements IGeoService {        const GeocodeUrl = 'http://maps.googleapis.com/maps/api/geocode/json';    public function translateEnRu(array $words){        // TODO        return $words;    }    public function geocode($address){        if(empty($address)){            return FALSE;        }        $params = array(            'address' =>$address,            'sensor' =>FALSE,            'language'=>'en'        );        return $this->_geocode($params);    }    public function reverseGeocode($coord){        if(empty($coord) || empty($coord['lat']) || empty($coord['lng'])){            return FALSE;        }        $params = array(            'latlng' => "{$coord['lat']},{$coord['lng']}",            'sensor' => 'false',            'language'=>'en'        );        return $this->_geocode($params);    }    private function _geocode($params){        $output = Yii::app()->curl->get(self::GeocodeUrl, $params);        $response = json_decode($output);        if(empty($response->results)){            return FALSE;        }        return $this->_parseGeoResult($response->results[0]);    }        private function _parseGeoResult($geoResult){        $location = $this->_parseLocation($geoResult->address_components);        $coordinates = $this->_parseCoordinates($geoResult->geometry);        return array_merge($location, $coordinates);    }        private function _parseLocation($addresses){        $location = array();        foreach ($addresses as $address){            switch ($address->types[0]){                case "country":                    $location['country'] = $address->long_name;                break;                case "administrative_area_level_1":                    $location['region'] = $address->long_name;                break;                case "locality":                    $location['city'] = $address->long_name;                break;            }        }                return $location;    }        private function _parseCoordinates($geometry){        $coordinates = array();        $bounds = array();        if(!empty($geometry->location)){            $coordinates[0] = $geometry->location->lat;            $coordinates[1] = $geometry->location->lng;        }        if(!empty($geometry->viewport)){            $bounds[0][0] = $geometry->viewport->northeast->lat;            $bounds[0][1] = $geometry->viewport->northeast->lng;            $bounds[1][0] = $geometry->viewport->southwest->lat;            $bounds[1][1] = $geometry->viewport->southwest->lng;        }                if(!empty($geometry->bounds)){            $bounds[0][0] = $geometry->bounds->northeast->lat;            $bounds[0][1] = $geometry->bounds->northeast->lng;            $bounds[1][0] = $geometry->bounds->southwest->lat;            $bounds[1][1] = $geometry->bounds->southwest->lng;        }                return array( 'coordinates'=>$coordinates, 'bounds'=>$bounds );    }}