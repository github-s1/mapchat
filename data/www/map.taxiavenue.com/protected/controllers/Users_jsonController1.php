<?phpclass Users_jsonController extends Controller{    /**     * @var string the default layout for the views. Defaults to '//layouts/column2', meaning     * using two-column layout. See 'protected/views/layouts/column2.php'.     */    public $layout = '//layouts/none';    /**     * @return array action filters     */    public function filters()    {        return array(            'accessControl', // perform access control for CRUD operations            'postOnly + delete', // we only allow deletion via POST request        );    }    /**     * Specifies the access control rules.     * This method is used by the 'accessControl' filter.     * @return array access control rules     */    public function accessRules()    {        return array(            array('allow', // allow all users to perform 'index' and 'view' actions                'actions' => array('index', 'view', 'GetActiveUser', 'GetUserById', 'UpdateUser', 'UpdateStatus',                    'Logout', 'UserBan','forgotPassword','checkCode','forgotPassword','CheckCodeFP',                    'NewPass'),                'users' => array('*'),            ),            array('allow', // allow authenticated user to perform 'create' and 'update' actions                'actions' => array('create', 'update'),                'users' => array('@'),            ),            array('allow', // allow admin user to perform 'admin' and 'delete' actions                'actions' => array('admin', 'delete'),                'users' => array('admin'),            ),            array('deny', // deny all users                'users' => array('*'),            ),        );    }    /**     * Lists all models.    */    public function actionIndex()    {        $dataProvider = new CActiveDataProvider('Users');        $this->render('index', array(            'dataProvider' => $dataProvider,        ));    }        /*     * Добавил во время отутствия серверника (28/09/14)     */    public function actionGetActiveUser()    {        $result = $this->GetUserById(Yii::app()->user->id);        $this->renderJSON(array('response' => $result));    }    /**     * Возвращает массив данных пользователя по его id.     * @param id_user     */    public function actionGetUserById()    {        $id_user = Yii::app()->request->getPost('id_user');        //$id_user = $_GET['id_user'];        $result = $this->GetUserById($id_user);                 $this->renderJSON(array('response' => $result));    }    /**     * Позволяет редактировать данные пользователя     *  входящие параметры:     * @param id_user    id пользователя по которуму нужно вернуть данные     * @param hash    id автарки пользователя     *  Необязательные входящие параметры:     * @param id_avatar    id автарки пользователя     * @param name    имя пользователя     * @param family    фамилия пользователя     * @param sex    пол     * @param age    возвраст     * @param about    информация о себе, интересы     * @param telephone    телефон пользователя     * @param email    email пользователя     * @param city    город пользователя     */    public function actionUpdateUser()    {        $id_user = Yii::app()->request->getPost('id_user');        $id_avatar = Yii::app()->request->getPost('id_avatar');        $name = Yii::app()->request->getPost('name');        $family = Yii::app()->request->getPost('family');        $sex = Yii::app()->request->getPost('sex');        $age = Yii::app()->request->getPost('age');        $about = Yii::app()->request->getPost('about');        $telephone = Yii::app()->request->getPost('telephone');        $email = Yii::app()->request->getPost('email');        $city = Yii::app()->request->getPost('city');        $status = Yii::app()->request->getPost('status');        $hash = Yii::app()->request->getPost('hash');        $update = new updateData();        if ((isset($id_user)) && (isset($hash))) {            $result = $update->updateUser($id_user, $id_avatar, $name, $family, $sex, $age, $about, $telephone, $email, $city, $status, $hash);        } else            $result = array('error' => array('error_code' => 2, 'error_msg' => $update::ERROR_FILDS_EMPTY));        $res = array('response' => $result);        $res_encode = json_encode($res);        $this->render('updateUser', array(            'data' => $res_encode        ));    }    public function actionUpdateStatus()    {        $id_user = Yii::app()->request->getPost('id_user');        $status = Yii::app()->request->getPost('status');        $hash = Yii::app()->request->getPost('hash');        $update = new updateData();        if ((isset($id_user)) && (isset($hash)) && (isset($status))) {            $result = $update->updateStatus($id_user, $status, $hash);        } else            $result = array('error' => array('error_code' => 2, 'error_msg' => $update::ERROR_FILDS_EMPTY));        $res = array('response' => $result);        $res_encode = json_encode($res);        $this->render('updateStatus', array(            'data' => $res_encode        ));    }    public function actionLogout()    {        $id_user = Yii::app()->request->getPost('id_user');        $hash = Yii::app()->request->getPost('hash');        if ((isset($id_user)) && (isset($hash))) {            Yii::app()->user->logout();           // Yii::app()->session->destroySession();            $model = Users::model()->findByPk($id_user);            $model->online = 0;            $model->save();            $result = 'success';        } else            $result = array('error' => array('error_code' => 2, 'error_msg' => updateData::ERROR_FILDS_EMPTY));        $res = array('response' => $result);        $res_encode = json_encode($res);        $this->render('logout', array(            'data' => $res_encode        ));    }    /**     * метод отправляет письмо админу, в котором содержиться информация о пользователе который пожаловался и на которого пожаловались     */    public function actionUserBan()    {        $id_user_ban = Yii::app()->request->getPost('id_user_ban');        $id_user_sender = Yii::app()->request->getPost('id_user_sender');        $update = new updateData();        if ((isset($id_user_ban)) && (isset($id_user_sender))) {            $user = $this->GetUserById($id_user_ban);            $to= Yii::app()->params['adminEmail'];            /* тема/subject */            $subject = "Жалоба на пользователя. Карта-чат";            /* сообщение */            $message = 'Поступила жалоба на пользователя ' . $user['name'] . $user['family'] . ' id=' . $user['id'];            /* Для отправки HTML-почты вы можете установить шапку Content-type. */            $headers= "MIME-Version: 1.0\r\n";            $headers .= "Content-type: text/html; charset=UTF-8\r\n";            /* дополнительные шапки */            $headers .= "From: onlineMap.org <no-reply@onlineMap.org>\r\n";            /* и теперь отправим из */            mail($to, $subject, $message, $headers);            $result = 'success';        } else            $result = array('error' => array('error_code' => 2, 'error_msg' => $update::ERROR_FILDS_EMPTY));        $res = array('response' => $result);        $res_encode = json_encode($res);        $this->render('userBan', array(            'data' => $res_encode        ));    }    /**     * Метод отпровляет проверочное животное пользователю который хочет восстановить пароль.     * @param login - логин пользователя, которому необходимо восстановить пароль     */    public function actionForgotPassword(){        $login = Yii::app()->request->getPost('login');        $user = Users::model()->findByAttributes(array('login'=>$login));        if (isset($user)){            $user->confirm_date = time();            $key_animals=array_rand(Yii::app()->params['animals']);            $user->confirm_code = Yii::app()->params['animals'][$key_animals];            $user->save();            if(filter_var($user->login, FILTER_VALIDATE_EMAIL)){                /*отправка письма для подтверждения регистрации*/                /* получатели */                $to= $user->login;                /* тема/subject */                $subject = "Восстановление пароля. Карта-чат";                /* сообщение */                $message = '<html><body>Добрый день!                                    Для востановления пароля необходимо перейти по ссылке и указать животное <b>'.$user->confirm_code.'</b>                                    <a href="http://'.$_SERVER['HTTP_HOST'].'/forgot_password/?code='.$user->id.'">Подтверждение email</a></body></html>';                /* Для отправки HTML-почты вы можете установить шапку Content-type. */                $headers= "MIME-Version: 1.0\r\n";                $headers .= "Content-type: text/html; charset=UTF-8\r\n";                /* дополнительные шапки */                $headers .= "From: onlineMap.org <no-reply@onlineMap.org>\r\n";                /* и теперь отправим из */                mail($to, $subject, $message, $headers);                $result = array('id_user'=>$user->id);                $result['animals'] = Yii::app()->params['animals'];            }            elseif($this->validate_phone_number($user->login)) {                $api = new MainSMS ( 'onlinemap.org' , 'ccfccab583b43', false, false );                $message = 'Для восстановления пароля необходимо указать животное - '.$user->confirm_code;                $api->sendSMS ($user->login, $message , 'onlinemap');                $result = $this->GetUserById($user->id);            }            else{                $result = array('error'=>array('error_code'=>2,'error_msg'=>updateData::ERROR_USER_LOGIN_INCORRECT));            }        }        else {            $result =array('error'=>array('error_code'=>2,'error_msg'=>updateData::ERROR_USER_NOT_EXIST));        }        $res = array('response' => $result);        $res_encode = json_encode($res);        $this->render('forgotPassword', array(            'data' => $res_encode        ));    }    /**     * метод проверяет на соответсвие животных при восстановлении пароля     */    public function actionCheckCodeFP(){        $id_user = Yii::app()->request->getPost('id_user');        $animal = Yii::app()->request->getPost('animal');        $objRes = Users::model()->findByPk($id_user);        if (isset($objRes)){            if ($objRes->confirm_code==$animal){                $time_live=$objRes->confirm_date-time();                if($time_live<=Yii::app()->params['time_code']){                    $objRes->confirm_code='';                    $objRes->confirm_date='0000-00-00 00:00:00';                    $objRes->save();                    $result = 'success';                }                else{                    $result = array('error'=>array('error_code'=>2,'error_msg'=>updateData::ERROR_CONFIRM_CODE));                }            }            else {                $result = array('error'=>array('error_code'=>2,'error_msg'=>updateData::ACCOUNT_ALREADY_ACTIVE));            }        }        else{            $result =array('error'=>array('error_code'=>2,'error_msg'=>updateData::ERROR_USER_NOT_EXIST));        }        $res = array('response'=>$result);        $res_encode = json_encode($res);        $this->render('checkCodeFP',array(            'data'=>$res_encode,        ));    }    public function actionNewPass(){        $id_user = Yii::app()->request->getPost('id_user');        $pass = Yii::app()->request->getPost('pass');        $objRes = Users::model()->findByPk($id_user);        if (isset($objRes)){            $objRes->pass = crypt($pass);            if ($objRes->save()){                $identity=new UserIdentity($objRes->login,$objRes->pass);                if($identity->authenticate_with_crypt()){                    Yii::app()->user->login($identity);                    $result['id_user']=Yii::app()->user->id;                    $result['hash'] = Yii::app()->getSession()->getSessionId();                }                else {                    $result = array('error'=>array('error_code'=>1,'error_msg'=>updateData::ERROR_AUTH));                }            }            else{                $result = array('error'=>array('error_code'=>2,'error_msg'=>updateData::ERROR_SAVE));            }        }        else {            $result = array('error'=>array('error_code'=>2,'error_msg'=>updateData::ERROR_USER_NOT_EXIST));        }        $res = array('response'=>$result);        $res_encode = json_encode($res);        $this->render('newPass',array(            'data'=>$res_encode,        ));    }    /**     * Метод производит подтвержение регистрации, который проверяет преданного животного с тем которое храниться в базе     * если пользователь с первого раза не правильно ввел животное то пользователь удаляется из бд     * @param id_user - id пользователя     * @param animal - животное     */    public function actionCheckCode(){        $id_user = Yii::app()->request->getPost('id_user');        $animal = Yii::app()->request->getPost('animal');        $objRes = Users::model()->findByPk($id_user);            if (isset($objRes)){                if ($objRes->confirm_code==$animal){                    $time_live=$objRes->confirm_date-time();                    if($time_live<=Yii::app()->params['time_code']){                        $objRes->active='y';                        $objRes->confirm_code='';                        $objRes->confirm_date='0000-00-00 00:00:00';                        $objRes->save();                        $identity=new UserIdentity($objRes->login,$objRes->pass);                        if($identity->authenticate_with_crypt()){                            Yii::app()->user->login($identity);                            $result['id_user']=Yii::app()->user->id;                            $result['hash'] = Yii::app()->getSession()->getSessionId();                        }                        else {                            $result = array('error'=>array('error_code'=>1,'error_msg'=>updateData::ERROR_AUTH));                        }                    }                    else{                        $objRes->delete();                        $result = array('error'=>array('error_code'=>2,'error_msg'=>updateData::ERROR_CONFIRM_CODE));                    }                }                elseif($objRes->confirm_code!=''){                    $objRes->delete();                    $result = array('error'=>array('error_code'=>2,'error_msg'=>updateData::ACCOUNT_NOT_ACTIVE));                }                else {                    $result = array('error'=>array('error_code'=>2,'error_msg'=>updateData::ACCOUNT_ALREADY_ACTIVE));                }            }            else{                $result =array('error'=>array('error_code'=>2,'error_msg'=>updateData::ERROR_USER_NOT_EXIST));            }        $res = array('response' => $result);        $res_encode = json_encode($res);        $this->render('checkCode',array(            'data'=>$res_encode,        ));    }}