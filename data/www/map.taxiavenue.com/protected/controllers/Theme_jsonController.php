<?phpclass Theme_jsonController extends Controller{	/**	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning	 * using two-column layout. See 'protected/views/layouts/column2.php'.	 */	public $layout='//layouts/none';	/**	 * @return array action filters	 */	public function filters()	{		return array(			'accessControl', // perform access control for CRUD operations			'postOnly + delete', // we only allow deletion via POST request		);	}	/**	 * Specifies the access control rules.	 * This method is used by the 'accessControl' filter.	 * @return array access control rules	 */	public function accessRules()	{		return array(			array('allow',  // allow all users to perform 'index' and 'view' actions				'actions'=>array('index','view','GetThemeByKindId','GetData','addTheme','UpdateTheme','DeleteTheme','GetAllThemes','getThemeById'),				'users'=>array('*'),			),			array('allow', // allow authenticated user to perform 'create' and 'update' actions				'actions'=>array('create','update'),				'users'=>array('@'),			),			array('allow', // allow admin user to perform 'admin' and 'delete' actions				'actions'=>array('admin','delete'),				'users'=>array('admin'),			),			array('deny',  // deny all users				'users'=>array('*'),			),		);	}	/**	 * Lists all models.	 */	public function actionIndex()	{		$dataProvider=new CActiveDataProvider('Theme');		$this->render('index',array(			'dataProvider'=>$dataProvider,		));	}	/**	 * Returns the data model based on the primary key given in the GET variable.	 * If the data model is not found, an HTTP exception will be raised.	 * @param integer $id the ID of the model to be loaded	 * @return Theme the loaded model	 * @throws CHttpException	 */	public function loadModel($id)	{		$model=Theme::model()->findByPk($id);		if($model===null)			throw new CHttpException(404,'The requested page does not exist.');		return $model;	}    /**     *Возавращает информацию по теме вида для заданного вида     * входящие параметры:     * id_kind (int) - id вида по которой нужно вернуть данные темы     */    public function actionGetThemeByKindId(){        $this->layout='//layouts/none';        $id_kind = Yii::app()->request->getPost('id_kind');        //$id_kind = $_GET['id_kind'];        $Themes = $this->GetThemeByKindId($id_kind);        $res = array('response'=>$Themes);        $res_encode=json_encode($res);        $this->render('getThemeByKindId',array(            'data'=>$res_encode        ));    }    public function actionGetData(){        $this->layout='//layouts/none';        $id_theme = Yii::app()->request->getPost('id_theme');        $limit = Yii::app()->request->getPost('limit');        $offset = Yii::app()->request->getPost('offset');        //$id_theme = $_GET['id_theme'];        $conv = new Converting;        $arKinds = $this->GetKindByThemeId($id_theme);        $i=0;        foreach ($arKinds as $Kind){            $id_kind = $Kind['id'];            $arTypes[] = $this->GetTypeByKindId($id_kind);            $arIcons[] = $this->GetIconByKindId($id_kind);            $arMarks[] = $this->GetMarksByKindId($id_kind,$limit,$offset);            $i++;        }        $k=0;        foreach ($arMarks as $mark){            for ($j=0; $j<$i; $j++){               if (isset($mark[$j]['id'])){                    $id_mark = $mark[$j]['id'];                   $arPhotos[] = $this->GetPhotoByMarkId($id_mark,$limit,$offset);                   $arPoints[] = $this->GetPointsByMarkId($id_mark,$limit,$offset);                   $arUsers[] =$this->GetUserByMarkId($id_mark);                   $k++;               }            }        }      // echo '<pre>'; print_r($arPoints); echo '</pre>';        foreach ($arPoints as $point){            for ($j=0; $j<$k; $j++){                if (isset($point[$j]['id'])){                    $id_city=$point[$j]['id_city'];                    $objCity = City::model()->findByPk($id_city);                    $conv = new Converting;                    $arCities[] = $conv->convertModelToArray($objCity);                }            }        }//        $test = 'ывавыаываыв';//        echo Transliteration::text($test);//        die();        $arRes['kinds'] = $arKinds;        $arRes['icons'] = $conv->user_array_unique($arIcons);        $arRes['marks'] = $arMarks;        $arRes['types'] = $conv->user_array_unique($arTypes);        $arRes['photos'] = $arPhotos;        $arRes['points'] = $arPoints;        $arRes['cities'] = $conv->user_array_unique($arCities);        $arRes['users'] = $conv->user_array_unique($arUsers);        $res=array('response'=>$arRes);        $res_encode=json_encode($res);        $this->render('getData',array(            'data'=>$res_encode        ));    }    /**     * метод добавляет тему меток     * входящие параметры:     * @param name (string) - обязательный параметр, название темы     * @param code (string) - не обязательный параметр, поле для отображения в урл, если не задан то code будет транслетилирован из name     */    public function actionAddTheme(){        $name = Yii::app()->request->getPost('name');        //$name = $_GET['name'];        $add = new addData;        $result = $add->addTheme($name);        $res = array('response'=>$result);        $res_encode=json_encode($res);        $this->render('addTheme',array(            'data'=>$res_encode        ));    }    /**     * метод изменяет тему меток     * входящие параметры:     * @param id_theme (int) - обязательный параметр, id темы которую нужно изменить     * @param name (string) - обязательный параметр, название темы     * @param code (string) - не обязательный параметр, поле для отображения в урл, если не задан то code будет транслетилирован из name     *     * @warning функцию проверить после добавления xdebug     * выдает ошибку когда передают несуществующий id темы     */    public function actionUpdateTheme(){        $id_theme = Yii::app()->request->getPost('id_theme');        $name = Yii::app()->request->getPost('name');       // $id_theme = $_GET['id_theme'];        //$name = $_GET['name'];        $update = new updateData;        $result = $update->updateTheme($id_theme,$name);        $res = array('response'=>$result);        $res_encode=json_encode($res);        $this->render('updateTheme',array(             'data'=>$res_encode         ));    }    /**     * метод удаляет тему меток     * входящие параметры:     * @param id_theme (int) - обязательный параметр, id темы которую нужно удалить     */    public function actionDeleteTheme(){        $id_theme = Yii::app()->request->getPost('id_theme');        //$id_theme = $_GET['id_theme'];        $delete = new deleteData;        $result = $delete->deleteTheme($id_theme);        $res = array('response'=>$result);        $res_encode=json_encode($res);        $this->render('deleteTheme',array(            'data'=>$res_encode        ));    }    /**     * метод выводит все темы     */    public function actionGetAllThemes(){        $arThemes=Controller::getAllThemes();        if ($arThemes){            $conv = new Converting;            $arThemes = $conv->convertModelToArray($arThemes);            $res = array('response'=>$arThemes);        }        else{            $res = array('response'=>'failed');        }        $res_encode = json_encode($res);        $this->render('getAllThemes',array(            'data'=>$res_encode        ));    }    public function actionGetThemeById(){        $id_theme = Yii::app()->request->getPost('id_theme');        if (isset($id_theme)){            $objTheme = Theme::model()->findByPk($id_theme);            $conv = new Converting();            $arTheme = $conv->convertModelToArray($objTheme);            $res = $arTheme;        }        else            $res = array('response'=>'failed');        $res_encode = json_encode($res);        $this->render('getThemeById',array(            'data'=>$res_encode        ));    }}