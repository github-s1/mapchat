define([    'backbone',     'model/Message'], function(Backbone, Message){    "use strict";    var casheMessages = [];    var startLimit = 10;    var addingLimit = 5;    return Backbone.Collection.extend({        model: Message,                initialize: function() {            this.comparator = this.sortByDateDesc;        },                createMessages: function(arrMessages, users, selfUserId){            selfUserId = parseInt(selfUserId, 10);            casheMessages = [];            arrMessages.forEach(function(message){                var modelMessage = this.createMessage(message, users, selfUserId);                if(modelMessage){                    casheMessages.push(modelMessage);                }            }, this);            this.reset(this.getLastMessages(startLimit));        },        getLastMessages: function(limit) {            var _messages = [];            for (var i = 0; i < limit; i++) {                if (casheMessages.length < 1) return _messages;                _messages.push(casheMessages.pop());            }            return _messages;        },        createMessage: function(message, users, selfUserId){            for(var i = 0, length = users.length; i < length; i++){                var user = users.at(i);                if(user.get("id") === message.user_id){                    var id = parseInt(message.user_id, 10);                    var _message = new Message();                    _message.set(message);                    _message.set("user", user);                    _message.set("current_user_id", selfUserId);                    _message.set("isSelf", selfUserId === id);                    return _message;                }            }            return false;        },                addMessage: function(data){            var _message = new Message();            _message.set(data.message);            _message.set("user", data.user);            _message.set("isSelf", data.isSelf);            _message.set("current_user_id", data.selfUserId);            this.add(_message);        },                toChatView: function() {            var models = [];            this.models.forEach(function(model){                models.push(model.toChatViewRow());            });            return models;        },        // comparator        sortByDateDesc: function(message1, message2){            /*var date1 = parseInt(message1.get("date_create"), 10),                date2 = parseInt(message2.get("date_create"), 10);            return date2 - date1;*/            // пока сделаем сортировку по id            var id1 = parseInt(message1.get("id"), 10),                id2 = parseInt(message2.get("id"), 10);                            return id2 - id1;        },        addMessFromCache: function(callback) {            var mess = this.getLastMessages(addingLimit);                        if (mess.length < 1) return callback(false);            //this.add(this.getLastMessages(mess));            this.add(mess);            callback(this);        }    });});