/*  *  */define(function(require){    "use strict";        var $ = require('jquery'),        _ = require('underscore'),        Backbone = require('backbone'),         VSidebarControll = require('view/VSidebarControll'),          VKind = require('view/VKind'),         VMark = require('view/VMark'),         VAuth = require('view/VAuth'),                Mark = require('model/Mark'),                Config = require('config'),          templates = require('templates'),                GeoService = require('model/GeoService'),                VLoader = require('view/VLoader'),                scroll = require('scroll');            var currScrollPos = 0;        var LIMIT = 20;        var startLimit = LIMIT;        return Backbone.View.extend({                el              : '#sidebar',        template        : _.template(templates.sidebar),        listMarks       : [],        $controll       : null,        $listMarks      : null,                themeId    : false,                myCoordinates: false,                YMapNS      : Config.YMapNS,                events: {            "click button#show_icons_panel"     :       "toggleBlock",            "click button#increase_zoom"        :       "increaseZoom",            "click button#decrease_zoom"        :       "decreaseZoom",                        "click button#define_location"      :       "defineLocation",                        "click button#yandex_probki"        :       "toggleYandexProbki"        },        initialize: function(options) {            this.parent = options.parent;            this.model = this.parent.model;            this.selfUser = this.model.selfUser;            this.marks = this.model.marks; // При старте странички отображаем первые 10 значков            this.allMarks = this.model.marks;            this.kinds = this.model.kinds;            this.themes = this.model.themes;            if(!this.el){                this.$el = $("<div id='sidebar'></div>").insertBefore($("body>footer").first());                this.setElement(this.$el);                this.$el.html(this.template());            }                        this.$listMarks = this.$("#icons ul").first();                        this.sc = new scroll({el: this.$el.find('div#icons ul'), triggerName: 'endScrollMarks'});            this.sc.bindScroll();            this.listenTo(this.sc, 'endScrollMarks', $.proxy(this, 'addMarksAfterScrolling'));//            setTimeout(function(){//                $("button#show_icons_panel").click();//            }, 500);        },        /**         * Подсасывающийся список при скроллинге (получить остальные значки)         */        addMarksAfterScrolling: function() {            if (startLimit >= this.marks.length) return;            startLimit += 10;            var loader = new VLoader({                data: {text: "Загрузка значков ... "},                css: {                    position: 'fixed',                    top: '100px',                    left: '0'                }            });            var self = this;            setTimeout(function(){                loader.remove();                self.renderMarks(self.marks);            }, 1500);                        /*var self = this;            this.marks.addMarksFromCache(function(marks){                if (marks == false) return;                self.marks = marks;                self.renderMarks(self.marks); // Добавление значков в sidebar                //self.parent.mainMap.addMarksToMap(marks);                self.sc.set('gettingData', false);            });*/        },        setIconsBlockHeight: function() {            var sidebarHeight = this.$el.height(),                 controlBlockHeight = this.$("div.head_bar").first().height(),                 iconsHeight = sidebarHeight - controlBlockHeight - 50;            this.$listMarks.height(iconsHeight + "px");        },                addMark: function() {            if(!this.selfUser.loggedIn()){                new VAuth({parent: this, user: this.selfUser});                return;            }                        this.parent.model.trigger("changePage", {                pageName: "markAdding"            });        },                clearListMarks: function() {            this.listMarks.forEach(function(markView){                markView.remove();            });            this.listMarks = [];            this.$listMarks.empty();        },                renderMarks: function(marks) {            this.clearListMarks();            var count = 1;            marks.forEach(function(markModel){                if (count > startLimit) return;                var mark = new VMark({                    parent: this, model: markModel, city: this.parent.model.getCity()                });                this.$listMarks.append(mark.$el);                this.listMarks.push(mark);                count++;            }, this);        },                removeControlBlock: function() {            if(this.$controll){                this.$controll.remove();                this.$controll = null;            }        },                initCityPage: function() {            this.removeControlBlock();            this.$controll = new VSidebarControll({parent: this});            this.$(".head_bar").first().empty().append(this.$controll.$el);            this.setIconsBlockHeight();        },                renderCityPage: function() {            this.initCityPage();            this.$controll.renderThemes();            this.renderMarks(this.marks);        },                setSelectedMark: function(markId) {            this.$listMarks.find("li.selected").removeClass("selected");            this.parent.setSelectedMark(markId);        },                hideMarksByKindId: function(kindId) {            this.marks.forEach(function(mark){                if(mark.get("id_kind") === kindId){                    mark.hideMapMark();                }            }, this);        },                showHiddenByKindIdMarks: function(kindId) {            this.marks.forEach(function(mark){                if(mark.get("id_kind") === kindId){                    mark.showMapMark();                }            }, this);        },                increaseZoom: function() {            this.parent.increaseZoom();        },                decreaseZoom: function() {            this.parent.decreaseZoom();        },                toggleBlock: function() {            if(this.$el.hasClass("hide")){                this.showBlock();            }            else {                this.hideBlock();            }        },                hideBlock: function() {            this.$el.addClass("hide");        },                showBlock: function() {            this.$el.removeClass("hide");        },                showMarkBalloon: function(markId) {            this.parent.showMarkBalloon(markId);        },                hideMarkBalloon: function(markId) {            this.parent.hideMarkBalloon(markId);        },                initKindPage: function(kind, marks) {            this.removeControlBlock();            this.$controll = new VKind({                parent: this,                marks: marks,                city: this.parent.model.getCity(),                kind: kind            });            this.$(".head_bar").first().empty().append(this.$controll.$el);            this.setIconsBlockHeight();        },                showKindPage: function(data) {//            console.log(data);            var kindId = data.kind.get("id"),                _marks = this.marks.select(function(mark){                    return mark.belongsToKind(kindId);                });            this.marks = _marks; //             this.initKindPage(data.kind, _marks);            this.parent.showKindPageState({                kind: data.kind.get("code"),                city: data.city,                marks: _marks            });            this.renderMarks(_marks);        },                showCityPage: function(city) {            startLimit = LIMIT;            this.marks = this.allMarks; // После просмотра странички конкретного вида значка восстанавливаем все значки            this.renderCityPage();            this.parent.showCityPageState({                city: city,                marks: this.marks            });        },        //        showMarkPageState: function(data) {//            this.parent.showMarkPage(data);//        },                changeTheme: function(themeId) {            this.themeId = themeId;            if(!themeId){                this.renderMarks(this.marks);                this.marks.showMapMarks();                return;            }            var _marks = [];            this.marks.forEach(function(mark){                if(mark.belongsToTheme(themeId)){                    mark.showMapMark();                    _marks.push(mark);                }                else {                    mark.hideMapMark();                }            }, this);            this.renderMarks(_marks);        },                changeWhere: function(selectedWhere) {            var data = {};            if (this.model.location.city.get('id')) data.choosen_city_id = this.model.location.city.get('id');            if (selectedWhere == 'city') data.id_city = this.model.location.city.get('id');            if (selectedWhere == 'map') data.bounds = this.parent.mainMap.newBounds;            if (this.themeId) data.id_theme = this.themeId;            var self = this;            $.ajax({                type: "POST",                context: this,                url: Config.baseUrlJSON + 'mark_json/GetMarksByAll',                data: data,                success: function(response) {                    var _marks = [];                    var data = response.response;                    this.model.setAddsMark(data);                    this.renderMarks(this.marks);                }            });        },                /**         * Сортировка значков "новые/интерестные"         */        changeInterest: function(selectedInterest) {            var field = 'views';            if (selectedInterest == 'new') field = 'createDatatime';            // Set the comparator in collection "Marks"            this.marks.comparator = function(mark) {                return -parseInt(mark.get(field)); // "-": reverse sort, wihtout "-": sort.            }            this.marks.sort();            this.changeTheme(this.themeId);        },        updateUri: function(data) {            this.parent.showKindPageState(data);        },                remove: function() {            this.removeControlBlock();            this.clearListMarks();            this.undelegateEvents();            this.stopListening();            this.$el.remove();        },        defineLocation: function(e, callback) {            if(this.myCoordinates === false) {                var gs = new GeoService();                var self = this;                gs.getMyLocation(function(err, res){                    self.myCoordinates = res;//.coordinates;                    //$.proxy(self.parent.mainMap, 'addMyLocation', res.coordinates);                    if (callback) return callback(self.myCoordinates);                    self.trigger('defineLocation', self.myCoordinates);                });            } else {                if (callback) return callback(this.myCoordinates);                this.trigger('defineLocation', this.myCoordinates);            }        },        /**         * Скрыть/показать яндекс пробки на карте         */        toggleYandexProbki: function(e) {            //console.log($(e.target).css('background-position'));            if (this.parent.mainMap.showedTraffic() == false) {                //! Пробки скрыты - отображаем                this.parent.mainMap.showTraffic();                this.$el.find('button#yandex_probki').css('background-position', '-19px').attr('title', 'Выключить отображения Яндекс пробок');            } else {                //! Пробки отображены - скрываем                this.parent.mainMap.hideTraffic();                this.$el.find('button#yandex_probki').css('background-position', '0').attr('title', 'Включить отображения Яндекс пробок');            }        },        /**         * Выбирает из кеша первые n значков         */        getLastMark: function(lastCount) {            var marks = [];            if (typeof lastCount == 'undefined') lastCount = 5;            for (var i = 0; i < lastCount; i++) {                //console.log(cacheMark.length);                if (cacheMark.length < 1) return marks;                marks.push(cacheMark.pop());            }            return marks;        },                /*addMyLocation: function(location) {            var myPlacemark = new this.YMapNS.Placemark(    			// Координаты метки    			[56.326944, 44.0075]            			);     console.log(myPlacemark);    		// Добавление метки на карту    		myMap.geoObjects.add(myPlacemark);        }*/    });});