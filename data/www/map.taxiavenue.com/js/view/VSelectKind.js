/*  * Виджет выбора вида значка. Используется при добавлении значка на карту. */define(function(require){    "use strict";        var $ = require('jquery'),         _ = require('underscore'),         Dialog = require('dialog'),         Backbone = require('backbone'),         VNewKind = require('view/VNewKind'),        templates = require('templates');        return Backbone.View.extend({                tagName             : 'div',        selectedKindId      : false,        ALL_THEMES_ITEM_ID  : '-5',                events: {            "click ul.kinds li"                 :       "setKind",            "click button[name='setPlace']"     :       "setPlace",            "change select[name='selectTheme']" :       "changeTheme"        },                initialize: function(options) {            this.model = options.model;            this.parent = options.parent;            if (options.specifyType === true) {                this.specifyType = true;                this.getDataSpecifyType();            } else {                this.specifyType = false;                this.getData();            }        },                setKind: function(e) {            var $kind = $(e.currentTarget),                 kindId = $kind.attr("data-kind-id");            if(kindId === "new"){                new VNewKind({model: this.model, parent: this});                this.selectedKindId = false;                return;            }            if(!this.selectedKindId){                this.$("button[name='setPlace']").prop("disabled", false);            }            this.selectedKindId = $kind.attr("data-kind-id");            this.$("ul.kinds li.selected").removeClass("selected");            $kind.addClass("selected");        },                addDataToNewKind: function(kind) {            var icon = this.icons.get(kind.get("id_icon"));            if(icon){                kind.set("icon", icon);            }            var theme = this.themes.get(kind.get("id_theme"));            if(theme){                kind.set("theme", theme);            }            var type = this.types.get(kind.get("id_type"));            if(type){                kind.set("type", type);            }        },                addNewKind: function(kind) {            if(kind && _.isObject(kind)){                this.addDataToNewKind(kind);                this.kinds.add(kind);                this.render();                alert("Добавлен новый вид значка. Вы можете выбрать его в общем списке");            }        },        setPlace: function() {            if(!this.selectedKindId){                return;            }            var kind = this.kinds.get(this.selectedKindId);            if (this.specifyType) {                this.parent.changeKind(kind);            } else {                this.parent.setPlace(kind);            }            this.dialog.close();        },        changeTheme: function(e) {            var themeId = $(e.target).find(":selected").val();            var kinds = this.getKindsForSelectedTheme(themeId);            this.renderKinds(kinds);        },                getKindsForSelectedTheme: function(themeId) {            if(themeId === this.ALL_THEMES_ITEM_ID){                return this.kinds;            }            var kinds = [];            this.kinds.forEach(function(kind){                if(kind.get("id_theme") === themeId){                    kinds.push(kind);                }            }, this);            return kinds;        },        /**         * Получить виды для значка при смене из общего         */        getDataSpecifyType: function() {            var self = this;            this.model.getDataForNewMark(function(err, res){                if(err){                    Backbone.trigger("logger:error", err);                    return;                }                self.kinds = self.getKindsForChangeType(res.kinds);                self.themes = res.themes;                self.icons = res.icons;                self.types = res.types;                self.createDialog();                self.render(false);            });        },        /**         *          */        getKindsForChangeType: function(arrKinds) {            arrKinds.forEach(function(kind){                if (kind.get('id') < 1 || kind.get('id_type') != 1) arrKinds.remove(kind);            });            return arrKinds;        },        getData: function() {            var self = this;            this.model.getDataForNewMark(function(err, res){                if(err){                    Backbone.trigger("logger:error", err);                    return;                }//                console.log(res);                self.kinds = res.kinds;                self.themes = res.themes;                self.icons = res.icons;                self.types = res.types;                self.createDialog();                self.render();            });        },        render: function() {            var templ = _.template(templates.selectKind);            this.$el.html(templ({specifyType: this.specifyType}));            this.renderThemes(this.themes);            this.renderKinds(this.kinds);        },        renderThemes: function(themes) {            var templ = _.template(templates.markAddingSelectTheme),                 viewThemes = templ({                     themes: themes, allThemesItemId: this.ALL_THEMES_ITEM_ID                });            this.$("div.selectThemeWrap").first().html(viewThemes);        },        renderKinds: function(kinds) {            var templ = _.template(templates.markAddingSelectKind),                 viewKinds = templ({                     kinds: kinds,                     isFullList: kinds.length === this.kinds.length,                    specifyType : this.specifyType                });            this.$("ul.kinds").first().html(viewKinds);        },        createDialog: function() {            var self = this;            var options = {                modal   : true,                title   : "Выберите вид значка",                width   : 320,                height  : 470,                buttons : null,                close: function(e) {                    if(e.cancelable === true){                        self.parent.parent.showSidebar();                        self.parent.map.addMarksToMap(self.model.marks, false); // true = после добавления значков спозиционаровть карту, чтоб помещались все значки                    }                }            };            this.dialog = new Dialog({widget: this, options: options});            this.dialog.setStyle({ padding: "15px 0 0" });        },                remove: function() {            if(this.themes){                this.themes.reset();                delete this.themes;            }            if(this.kinds && !this.specifyType){                this.kinds.reset();                delete this.kinds;            }            if(this.icons){                this.icons.reset();                delete this.icons;            }            if(this.types){                this.types.reset();                delete this.types;            }            this.undelegateEvents();            this.stopListening();            this.$el.remove();        }        //        close: function() {//            this.dialog.close();//        }    });});