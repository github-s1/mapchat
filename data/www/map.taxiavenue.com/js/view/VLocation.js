/*  *  */define(function(require){    "use strict";        var $ = require('jquery'),         _ = require('underscore'),        Backbone = require('backbone'),        Dialog = require('dialog'),        Storage = require('storage'),        VLoader = require('view/VLoader'),        VCountryItem = require('view/VCountrySelectItem'),        VRegionItem = require('view/VRegionSelectItem'),        VCityItem = require('view/VCitySelectItem'),        Countries = require('collection/Countries'),        Regions = require('collection/Regions'),         Cities = require('collection/Cities'),        AppError = require('appError'),         templates = require('templates');        return Backbone.View.extend({                tagName     : 'form',        className   : 'select_dislocation',        template    : _.template(templates.selectLocation),                countries: new Countries,        regions: new Regions,        cities: new Cities,                countriesViews: [],        regionsViews: [],        citiesViews: [],                dialog      : null,                requestCountries: new Storage({            limit: 20,            offset: 0        }),        requestRegions: new Storage({            limit: 20,            offset: 0        }),        requestCities: new Storage({            limit: 20,            offset: 0        }),                events: {            "click button.show-city"          :       "changeSity"        },                initialize: function(options) {            this.parent = options.parent; //VTopControl->Vapp            this.model = options.location;                        this.cityId = this.parent.location.city.get('id');            this.regionId = this.parent.location.city.get('id_region');            this.countryId = this.parent.location.city.get('id_country');            this.listenTo( this.countries, 'selectCountry', this.selectCountry );            this.listenTo( this.countries, 'reset', this.renderCountries );                        this.listenTo( this.regions, 'selectRegion', this.selectRegion );            this.listenTo( this.regions, 'reset', this.renderRegions );                        this.listenTo( this.cities, 'selectCity', this.selectCity );            this.listenTo( this.cities, 'reset', this.renderCities );                        this.createDialog();            this.render();        },                showDefault: function() {            var self = this;            var loader = new VLoader({                data: {text: "Получение списка регионов ... "}            });                        $.when(                self.countries.fetch(self.requestCountries.data)            )            .then(function(){        //self.countries.getSelectedCountryId()                self.requestRegions.setField("id_country", self.getIdCountry());                return self.regions.fetch(self.requestRegions.data);            })            .then(function(){        //self.regions.getSelectedRegionId()                self.requestCities.setField("id_region", self.getIdRegion());                return self.cities.fetch(self.requestCities.data);            })            .done(function(){                loader.remove();            })            .fail(function(e){                loader.remove();                Backbone.trigger("logger:error", new AppError({                    inner: e,                    type: "ServerError",                    className: "VLocation",                    methodName: "showDefault",                    message: "Не удалось получить список регионов"                }));            });        },                selectCountry: function(country){            var self = this,                loader = new VLoader({                data: {text: "Получение списка регионов ... "}            });            if (this.countryId) {                this.countryId = null;                window.countryId = null;            }            if (this.regionId) {                this.regionId = null;                window.regionId = null;            }            if (this.cityId) {                this.cityId = null;                window.cityId = null;            }            window.countryId = null;            window.regionId = null;            window.cityId = null;                        //window.countryId = this.countries.get(country.id).id;            this.countries.setSelectedCountry(this.countries.get(country.id));            this.requestRegions.setField("id_country", this.getIdCountry());            this.regions.fetch(this.requestRegions.data)            .then(function(){                                self.requestCities.setField("id_region", self.getIdRegion());                return self.cities.fetch(self.requestCities.data);            })            .done(function(){                loader.remove();            })            .fail(function(e){                loader.remove();                Backbone.trigger("logger:error", new AppError({                    inner: e,                    data: country,                    type: "ServerError",                    className: "VLocation",                    methodName: "selectCountry",                    message: "Не удалось получить список регионов"                }));            });        },                selectRegion: function(region) {            var loader = new VLoader({                data: {text: "Получение списка городов по региону ... "}            });                        if (this.regionId) {                this.regionId = null;            }            if (this.cityId) {                this.cityId = null;            }            window.regionId = null;            window.cityId = null;            //window.regionId = this.regions.get(region.id).id;            this.regions.setSelectedRegion(this.regions.get(region.id));            this.requestCities.setField("id_region", this.getIdRegion());            this.cities.fetch(this.requestCities.data)            .done(function(){                loader.remove();            })            .fail(function(e){                loader.remove();                Backbone.trigger("logger:error", new AppError({                    inner: e,                    data: region,                    type: "ServerError",                    className: "VLocation",                    methodName: "selectRegion",                    message: "Не удалось получить список городов по региону"                }));            });        },                selectCity: function(city) {            window.cityId = this.cities.get(city.id).id;            this.cities.setSelectedCity(this.cities.get(city.id));        },                render: function(data) {            var view = this.template(data);            this.$el.html(view);            this.showDefault();        },                renderCountries: function() {            this.clearCountries();            var $countries = this.$("ul.country").first(),                selectedCountryId = this.getIdCountry();            this.countries.forEach(function(country){                var countryView = new VCountryItem({                    model: country,                     selected: (selectedCountryId === country.get("id"))                });                this.countriesViews.push(countryView);                $countries.append(countryView.el);            }, this);        },                renderRegions: function() {            this.clearRegions();            var $regions = this.$("ul.region").first(),                selectedRegionId = this.getIdRegion();            this.regions.forEach(function(region){                var regionView = new VRegionItem({                    model: region,                     selected: (selectedRegionId === region.get("id"))                });                this.regionsViews.push(regionView);                $regions.append(regionView.el);            }, this);        },                renderCities: function() {            var $cities = this.$("ul.city").first().empty(),                selectedCityId = this.getIdCity();            this.cities.forEach(function(city){                var cityView = new VCityItem({                    model: city,                     selected: (selectedCityId === city.get("id"))                });                this.citiesViews.push(cityView);                $cities.append(cityView.el);            }, this);        },                clearCountries: function() {            this.countriesViews.forEach(function(countryView){                countryView.remove();                countryView = null;            }, this);            this.countriesViews = [];        },                clearRegions: function() {            this.regionsViews.forEach(function(regionView){                regionView.remove();                regionView = null;            }, this);            this.regionsViews = [];        },                clearCities: function() {            this.citiesViews.forEach(function(cityView){                cityView.remove();                cityView = null;            }, this);            this.citiesViews = [];        },                createDialog: function() {            var options = {                modal   : true,                resizable: false,                title   : "Выберите местоположение",                width   : 530,                height  : 380,                position: "center top",                show: { effect: "blind", duration: 800 },                hide: { effect: "fade", duration: 300 },                buttons : null            };            this.dialog = new Dialog({widget: this, options: options});        },                /**         * Спозиционировать карту относительно выбранного города         * Basemodel.changeLocation         */        changeSity: function() {            var country = this.countries.getSelectedCountry(),                region = this.regions.getSelectedRegion(),                city = this.cities.getSelectedCity();            this.model.set({                country: country ? country : null,                region: region ? region : null,                city: city ? city : null,            });            this.dialog.close();        },                remove: function() {            this.countries.reset();            this.regions.reset();            this.cities.reset();            this.undelegateEvents();            this.stopListening();            this.$el.remove();        },                getIdCity: function() {            if (window.cityId) return window.cityId;            return this.cityId ? this.cityId : this.cities.getSelectedCityId();        },                getIdRegion: function() {            if (window.regionId) return window.regionId;            return this.regionId ? this.regionId : this.regions.getSelectedRegionId();        },                getIdCountry: function() {            if (window.countryId) return window.countryId;            return this.countryId ? this.countryId : this.countries.getSelectedCountryId();        }    });});