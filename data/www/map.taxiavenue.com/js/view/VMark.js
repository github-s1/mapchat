/*  *  */define([    'jquery',    'underscore',    'backbone',     'config',    'templates'], function($, _, Backbone, Config, templates){    "use strict";        var ThirdPartyMarks = require('model/ThirdPartyMarks').getInstance();        return Backbone.View.extend({                tagName     : 'li',        className   : 'clear',        template    : _.template(templates.sidebarMark),                _events: {            "click"                 :       "selectMark",            "mouseenter"            :       "showBalloon",            "mouseleave"            :       "hideBalloon",            "click span.toggle"     :       "toggleVisibility",            "click figure > a"      :       "showKindPage",            "click figcaption > a"  :       "showMarkPage"        },                initialize: function(options) {            this.parent = options.parent;            this.model = options.model;            this.city = options.city;            this.kind = this.model.get("kind");                        this.listenTo(this.kind, "change", this.render);            this.listenTo(this.model, "hideMapMark", this.hideMark);            this.listenTo(this.model, "showMapMark", this.showMark);                        // Даем время для формирования маркера карты            var self = this;            setTimeout(function(){                self.delegateEvents(self._events);            }, 1000);                        this.render();        },                render: function() {            var view = this.template(this.model.toItemOfList(this.city));            this.$el.html(view);            return this;        },                selectMark: function(e) {            var target = e.target;            if(target.tagName.toUpperCase() === "IMG" || $(target).hasClass("title") || $(target).hasClass("toggle")){                return;            }                        this.parent.setSelectedMark(this.model.get("id"));            this.$el.addClass("selected");        },                showBalloon: function() {            var mapMark = this.model.get("mapMark");            if(mapMark.options.get("visible") && ! mapMark.balloon.isOpen()){                this.parent.showMarkBalloon(this.model.get("id"));            }        },                hideBalloon: function() {            this.parent.hideMarkBalloon(this.model.get("id"));        },                toggleVisibility: function(e) {            var $elem = $(e.currentTarget);            if($elem.hasClass("show_icon")){                this.parent.hideMarksByKindId(this.model.get("kind").get("id"));            }            else {                this.parent.showHiddenByKindIdMarks(this.model.get("kind").get("id"));            }        },                hideMark: function($elem) {            var url = "url('" + Config.baseUrl + "img/hide_icons.png')";            $elem = $elem || this.$("span.toggle");            $elem.removeClass("show_icon").addClass("hide_icon")                    .css("background-image", url);        },                showMark: function($elem) {            var url = "url('" + Config.baseUrl + "img/show_icons.png')";            $elem = $elem || this.$("span.toggle");            $elem.removeClass("hide_icon").addClass("show_icon")                    .css("background-image", url);        },                showKindPage: function(e) {            e.preventDefault();            ThirdPartyMarks.showMarks = false,            this.parent.showKindPage({                city: this.city.get("name_en"),                kind: this.model.get("kind")            });        },                showMarkPage: function(e) {            e.preventDefault();            this.parent.model.trigger("changePage", {                pageName: "mark",                 pageData: {                    city: this.city,                    mark: this.model                }            });        },                remove: function() {            this.undelegateEvents();            this.stopListening();            this.$el.remove();        }    });});