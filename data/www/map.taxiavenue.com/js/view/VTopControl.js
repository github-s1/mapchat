define(function(require){    "use strict";        var $ = require('jquery'),         Backbone = require('backbone'),        VAuth = require('view/VAuth'),        VChat = require('view/VChat'),        VPersonal = require('view/VPersonal'),         VLoader = require('view/VLoader'),        VLocation = require('view/VLocation');        return Backbone.View.extend({                el          : '#topControl',        chatWin     : null,                actionInMemory: null,                events: {            "click p.chat"              :       "toggleChatBlock",            "click p.personal_msg"      :       "personalInfo",            "click input.search_but"    :       "searchAddr",            "click button.select_city"  :       "selectCity"        },        /**         * Асинхронная инициализация чата         */        instanseVChat: function(callback) {            this.chatWin = new VChat({ parent: this});            callback(this.chatWin);        },                /**         * Открыть/закрыть окно чата         */        toggleChatBlock: function() {            if (!this.chatWin) {                var lo = new VLoader({                    data: {text: "Загрузка чата ... "},                    css: {                        right: '10px',                        left: 'auto'                    }                });                this.instanseVChat(function(chatWin){                    chatWin.toggleChatWin();                    lo.remove();                });            } else {                this.chatWin.toggleChatWin();            }        },                initialize: function(options){            this.parent = options.parent;            this.model = this.parent.model;            this.chat = this.model.chat;            this.selfUser = this.model.selfUser;            this.location = this.model.location;            this.chatWin = new VChat({ parent: this});            this.listenTo(this.selfUser, 'logged:in', this.updateView);            this.listenTo(this.selfUser, 'logged:out', this.loggedOut);            this.listenTo(this.selfUser, 'change', this.updateView);        },        personalInfo: function(e) {            if(e){                e.stopPropagation();            }                        if(!this.selfUser.loggedIn()){                new VAuth({parent: this, user: this.selfUser});                return;            }                        this.actionInMemory = null;            if(this.personalView){                this.closePersonalBlock();            }            else {                this.personalView = new VPersonal({ parent: this });            }        },                updateView: function() {            var $personal_msg = this.$(".personal_msg").first();            if(this.selfUser.loggedIn()){                $personal_msg.removeClass("logout").html(this.selfUser.get('name'));            }            else {                $personal_msg.addClass("logout").html("Вход <span></span>");            }        },        loggedOut: function() {            this.updateView();        },        showProfile: function() {            if(this.selfUser.loggedIn()){                this.model.trigger("changePage", {                    pageName: "profile", pageData: {userId: this.selfUser.get("id")}                });            }        },                logout: function() {            if(this.selfUser.loggedIn()){                this.selfUser.logout();            }        },                afterAuthAction: function() {            if(this.actionInMemory){                this[this.actionInMemory]();            }        },                /**         * Поиск по строке         */        searchAddr: function(e) {            e.preventDefault();            var $searchAddr = this.$("input.search_addr");            var searchStr = $.trim($searchAddr.val());            $searchAddr.val("");            if(searchStr !== ""){                this.location.getBySearchString(searchStr);            }        },                setCityName: function(cityName) {            this.$("button.select_city").text(cityName);        },                removeCityName: function() {            this.$("button.select_city").text("Выбор города");        },                selectCity: function() {            new VLocation({ parent: this, location: this.location});        },                initStateFromAddress: function() {//            this.parent.initStateFromAddress();            this.model.defineLocation("getByAddress");        },                closePersonalBlock: function() {            if(this.personalView){                this.personalView.remove();                this.personalView = null;            }        },                changeLocation: function(data) {            this.parent.setCityPageState({city: data.city.get("name_en")});        }    });  });