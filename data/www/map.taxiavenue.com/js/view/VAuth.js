define(function(require){    "use strict";        var $ = require('jquery'),         _ = require('underscore'),         Backbone = require('backbone'),         Dialog = require('dialog'),         VLoader = require('view/VLoader'),         VRemindPassword = require('view/VRemindPassword'),         VPasswordConfirm = require('view/VPasswordConfirm'),         VNotice = require('view/VNotice'),                AuthSocial = require('model/AuthSocial'),        templates = require('templates');        return Backbone.View.extend({                tagName     : 'div',        id          : 'auth',        className   : 'login',        template    : _.template(templates.auth),                formData    : {            error: "",            login: "",            password: "",            loginRegister: "",            passwordRegister: "",            privacyPolicy: false        },                events: {            "click div.enter_soc_services button"   :       "enterSocServices",            "click button.remind_password"          :       "remindPassword",            "click button.login"                    :       "login",            "submit form[name='auth']"              :       "login",            "click button.register"                 :       "register",            "submit form[name='register']"          :       "register",                        "click label.confidential span.link"    :       "showConfidential",        },                initialize: function(options){             this.parent = options.parent;            this.user = options.user;//            console.log(this.user);                        this.createDialog();            this.render();            this.setUI();            //            setTimeout(function(){//                $("button.remind_password").click();//            }, 100);        },                enterSocServices: function(e) {            var name = $(e.target).attr("class");            var authSystem = new AuthSocial(name);            authSystem.openDialog();            //console.log("enterSocServices: " + name);        },                // Напоминание пароля        remindPassword: function() {            new VRemindPassword({parent: this});        },                /**         * Выбранно животное - обработка результата         */        remindPasswordAnswer: function(answer) {            new VPasswordConfirm({                parent: this, action: "remindPassword", callback: "passwordConfirmAnswer",                 userId: answer.id_user, animals: answer.animals            });        },                // VMessage        passwordConfirmAnswer: function(answer) {            if(answer.error){                new VNotice({                    html: "<p>" + answer.error.error_msg + "</p>",                    addClassName: "error",                    css: {"z-index": 10000}                });            }            else {                var mess = 'На Ваш электронный адрес ' + answer.login + ' выслан новый<br /> сгенерированый системой пароль.<br /><br />';                mess += 'Вы всегда сможете изменить его в своем <a href="' + baseUrl + '/user/' + answer.id + '">личном кабинете</a>';                new VNotice({                    html: "<p>" + mess + "</p>",                    addClassName: "error",                    css: {"z-index": 10000},                                        autoHidden: false,                });                this.user.setDataForSelfUser(answer);                this.dialog.close();            }        },                login: function(e) {            e.preventDefault();            if(!this.checkFormData("validateAuth")){                return;            }            var self = this,                login = this.formData.login,                password = this.formData.password,                loader = new VLoader({                    data: {text: "Авторизация ... "}                 });            $.when(this.user.login({login: login, password: password})).then(function(response){                response = eval('(' + response + ')').response;                if(response.error){                    self.showErrorForm({                        message: "Неправильный логин или пароль"                    });                }                else {                    if(self.parent.afterAuthAction){                        self.parent.afterAuthAction();                    }                    self.dialog.close();                }                loader.remove();            });        },                registerConfirm: function(answer) {            new VPasswordConfirm({                parent: this, action: "registerConfirm", callback: "registerConfirmAnswer",                 userId: answer.id_user, animals: answer.animals            });        },                registerConfirmAnswer: function(answer) {            if(answer.error){                new VNotice({                    html: "<p>" + answer.error.error_msg + "</p>",                    addClassName: "error"                });            }            else {                this.user.setDataForSelfUser(answer);            }        },                register: function(e) {            e.preventDefault();            if(!this.checkFormData("validateRegister")){                return;            }                        var self = this,                login = this.formData.loginRegister,                password = this.formData.passwordRegister,                loader = new VLoader({                    data: {text: "Регистрация ... "}                 });            $.when(this.user.register({login: login, password: password})).then(function(response){                try {                    response = eval('(' + response + ')').response;                }                catch(e){                    alert("Не удалось осуществить регистрацию. Пожалуйста, повторите попытку позже.");                    Backbone.trigger("logger:error", {                        className: "VAuth",                        methodName: "register",                        message: "Ну удалось считать ответ сервера",                        inner: e                    });                }                if(response.error){                    self.showErrorForm({                        message: response.error.error_msg                    });                }                else {                    self.registerConfirm(response);                    self.dialog.close();                }                loader.remove();            });        },                showForm: function() {            this.dialog.setStyle({height: "450px"});            this.formData.error = "";            this.render();        },                showErrorForm: function(err) {            this.formData.error = err.message;            this.dialog.setStyle({height: "510px"});            this.render();            this.$("div.error").removeClass("hide");            if(err.field){                this.$("[name='" + err.field + "']").addClass("error").focus();            }        },                checkFormData: function(methodValidate) {            this.setFormData();            try {                this.user[methodValidate](this.formData);                this.showForm();                return true;            }            catch(e){                this.showErrorForm(e);                return false;            }        },                setFormData: function() {            var $login = this.$("[name='login']"),                 login = $.trim($login.val()),                 $password = this.$("[name='password']"),                 password = $.trim($password.val()),                 $login_register = this.$("[name='loginRegister']"),                 login_register = $.trim($login_register.val()),                 $password_register = this.$("[name='passwordRegister']"),                 password_register = $.trim($password_register.val());                        this.formData = {                login: login,                password:password,                loginRegister: login_register,                passwordRegister: password_register,                privacyPolicy: this.$("input[name='privacyPolicy']").prop("checked")            };        },                render: function() {            var view = this.template(this.formData);            this.$el.html(view);            return this;        },                createDialog: function() {            var options = {                modal   : true,                title   : "Войти через",                width   : 340,                height  : 530,                resizable: false,                buttons : null            };            this.dialog = new Dialog({widget: this, options: options});        },                setUI: function() {            var $title = this.$el.closest("div.dialog").prev(".ui-dialog-titlebar").find("span");            $title.css({"font-size": "18px", "text-align": "center"});        },                remove: function() {            this.undelegateEvents();            this.stopListening();            this.$el.remove();        },        showConfidential: function(e) {            e.preventDefault();            window.open(baseUrl + '/policy');            /*var tmpl = _.template(templates.confidential);            new VNotice({                    html: tmpl,                    addClassName: "error",                    css: {"z-index": 10000},                                        autoHidden: false,                                        widthMain : 300,                });*/        },    });});