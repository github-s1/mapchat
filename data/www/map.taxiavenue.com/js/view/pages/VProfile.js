/*  *  */define(function(require){    "use strict";        var $ = require('jqueryui'),        _ = require('underscore'),        User = require('model/User'),        Backbone = require('backbone'),        AppError = require('appError'),        VLoader = require('view/VLoader'),                VAuth = require('view/VAuth'),                VNotice = require('view/VNotice'),        templates = require('templates');        return Backbone.View.extend({                el          : '#profile',        map         : null,        template    : _.template(templates.profile),        templateEdit: _.template(templates.profileEdit),                viewUser    : null,                events: {            "click button[name='edit']"         :       "edit",            "click button[name='save']"         :       "save",            "click button[name='cancel']"       :       "render",            "click figure.big_photo"            :       "changeUserAvatar",            "change input[name='big_photo']"    :       "loadUserAvatar",                        "click a.hz"                        :       "shareHz",            "click a.fb"                        :       "shareFb",            "click a.vk"                        :       "shareVk",                        "click button[name='complaint']"    :       "complaint",        },                initialize: function(options) {            this.parent = options.parent;            this.baseModel = this.parent.model;            this.selfUser = this.baseModel.selfUser;                        this.parent.removeSidebar();            this.parent.removeMapMain();                        if(!this.el){                this.$el = $("<div id='profile'></div>").insertAfter($("body>header").first());                this.setElement(this.$el);            }            this.setCity();            this.listenTo(this.selfUser, 'logged:in', this.render);            this.listenTo(this.selfUser, 'logged:out', this.render);            $('body').css({'overflow-y' : 'auto', 'overflow-x' : 'hidden'});        },        /**         * Определение города на странице "личный кабинет"         */        setCity: function() {            this.baseModel.getByIp(function(err){                if(err){                    console.log('error VProfile/setCity');                }            });        },        changeUserAvatar: function() {            if(this.viewUser.get("id") !== this.selfUser.get("id")){                return;            }            this.$("input[name='big_photo']").click();        },                loadUserAvatar: function(e) {            if(this.viewUser.get("id") !== this.selfUser.get("id")){                return;            }                        var files = e.target.files;            if(files.length === 0){                return;            }                        var self = this,                data = new FormData(this.$("form").get(0)),                loader = new VLoader({                    data: {text: "Сохраняем изображение ... "}                });                     this.viewUser.updateAvatar(data, function(err, res){                loader.remove();                if(err || (res && res.error)){                    err = err || res.error;                    alert("Не удалось сохранить изображение");                    Backbone.trigger("logger:error", err);                }                else {                    console.log(res);                    self.$("figure.big_photo img").attr("src", self.viewUser.getBigAvatarSrc());                    self.$("figure.small_photo img").attr("src", self.viewUser.getSmallAvatarSrc());                }            });        },                edit: function() {            this.$("figure.big_photo").addClass("edit").find("span.corner").removeClass("hidden");            this.$("button[name='edit']").addClass("hidden");            this.$("button[name='save']").removeClass("hidden");            this.$("button[name='cancel']").removeClass("hidden");            this.$("label.password, label.password_confirm").removeClass("hidden");            $("input, textarea").prop("disabled", false);        },                /**         *          */        save: function() {            var self = this,                data = this.$("form").first().formSerialize();                    if(!this.checkFormData()){                return;            }                        if(!data){                return;            }                        var loader = new VLoader({                data: {text: "Обновляем данные ... "}            });            this.viewUser.update(data, function(err, res){                if(err || !res){                    alert("Не удалось сохранить изменения. Повторите попытку позже");                }                self.selfUser.set(res); //                self.render();                loader.remove();            });        },                checkFormData: function() {            try {                var data = this.getFormData();                if(data.login === ""){                    throw Error("Поле 'Логин' является обязательным");                }                if(data.pass !== ""){                    if (data.pass !== data.pass_confirm) throw Error("Не совпадают поля 'Новый пароль' и 'Подтвердить пароль'");                    if (data.pass.length < 5) throw Error("Поле 'пароль' должно содержать не менее 5 символов");                    if (data.pass_confirm.length < 5) throw Error("Поле 'Подтвердить пароль' должно содержать не менее 5 символов");                }                if(data.age !== ""){                    if(isNaN(parseInt(data.age, 10))){                        throw Error("Некорретное значение поля 'Возраст'");                    }                }                return true;            }            catch(e){                alert(e.message);                return false;            }        },                getFormData: function() {            return {                name: $.trim(this.$("input[name='name']").val()),                family: $.trim(this.$("input[name='family']").val()),                login: $.trim(this.$("input[name='login']").val()),                email: $.trim(this.$("input[name='email']").val()),                sex: $.trim(this.$("input[name='sex']").val()),                age: $.trim(this.$("input[name='age']").val()),                telephone: $.trim(this.$("input[name='telephone']").val()),                city: $.trim(this.$("input[name='city']").val()),                status: $.trim(this.$("input[name='status']").val()),                pass: $.trim(this.$("input[name='pass']").val()),                pass_confirm: $.trim(this.$("input[name='pass_confirm']").val()),                about: $.trim(this.$("textarea[name='about']").val())            };        },                create: function(options) {            if(options && options.appInfo && options.appInfo.profilePage){                this.setByPageData(options.appInfo.profilePage);            }            else if(options && options.pageData && options.pageData.userId) {                this.setByServerData(options.pageData.userId);            }            else {                var err = new AppError({                    type: "ScriptError",                    className: "VProfile",                    methodName: "create",                    message: "Не удалось установить состояние страницы"                });                Backbone.trigger("logger:error", err);                this.baseModel.trigger("changePage", {                    pageName: "error", options: err                });            }        },                set: function(options) {            if(options && options.pageData && options.pageData.userId){                this.setByServerData(options.pageData.userId);            }            else {                var err = new AppError({                    type: "ScriptError",                    className: "VProfile",                    methodName: "set",                    message: "Не удалось установить состояние страницы"                });                Backbone.trigger("logger:error", err);                this.baseModel.trigger("changePage", {                    pageName: "error", options: err                });            }        },                setByServerData: function(userId) {            if(userId === this.selfUser.get("id")){                this.viewUser = this.selfUser.clone();                this._showPage();            }                        var self = this;            this.baseModel.getUserById(userId, function(err, user){                if(err){                    Backbone.trigger("logger:error", err);                    self.baseModel.trigger("changePage", {                        pageName: "error", options: {message: err}                    });                }                else {                    self.viewUser = user;                    self._showPage();                }            });        },                setByPageData: function(pageData) {            if(pageData.user.id === this.selfUser.get("id")){                this.viewUser = this.selfUser.clone();            }            else {                this.viewUser = new User(pageData.user);            }            this._showPage();        },                _showPage: function() {            this.render();            this.parent.showProfilePageState({                userId: this.viewUser.get("id")            });        },                clear: function() {            this.viewUser.clear({silent: true});            this.remove();        },                render: function() {            var view;            if(this.selfUser.hasPrivilegesToEdit(this.viewUser.get("id"))){                view = this.templateEdit(this.viewUser.toProfilePageView());                this.$el.addClass("edit");            }            else {                view = this.template(this.viewUser.toProfilePageView());                this.$el.removeClass("edit");            }            this.$el.html(view);            return this;        },                shareHz: function(e) {            e.preventDefault();            var name = (this.parent.page.viewUser.name !== null) ? this.parent.page.viewUser.get('name') : this.parent.page.viewUser.get('login');            var url = 'http://connect.mail.ru/share?';            var pageUrl = encodeURIComponent(window.location);            var title = encodeURIComponent('Пользователь ' + name);            var description = encodeURIComponent('Описение пользователя');            this.parent.shareHz(url, pageUrl, title, description);        },        shareFb: function(e) {            e.preventDefault();            var name = (this.parent.page.viewUser.name !== null) ? this.parent.page.viewUser.get('name') : this.parent.page.viewUser.get('login');            var url = 'http://www.facebook.com/sharer.php?s=100';            var pageUrl = encodeURIComponent(window.location);            var title = encodeURIComponent('Пользователь ' + name);            var summary = encodeURIComponent('Описение пользователя');            var image = encodeURIComponent(this.$el.find('figure.big_photo img').attr('src'));            this.parent.shareFb(url, pageUrl, title, summary, image);        },        shareVk: function(e) {            e.preventDefault();                        var name = (this.parent.page.viewUser.name !== null) ? this.parent.page.viewUser.get('name') : this.parent.page.viewUser.get('login');            var url = 'http://vkontakte.ru/share.php?';            var pageUrl = encodeURIComponent(window.location);            var title = encodeURIComponent('Пользователь ' + name);            var description = encodeURIComponent('Описение пользователя');            var image = encodeURIComponent(this.$el.find('figure.big_photo img').attr('src'));            this.parent.shareVk(url, pageUrl, title, description, image);        },        complaint: function(e) {            if(!this.selfUser.loggedIn()){                this.actionInMemory = "complaint";                new VAuth({parent: this, user: this.selfUser});                return;            }            $(e.currentTarget).css('display', 'none');            var loader = new VLoader({data: {text: "Обработка жалобы ... "}});            this.baseModel.sendUserBan(this.selfUser.get('id'), this.viewUser.get('id'),function(res){                if (res == 'ok') {                    var mess = "Ваша жалоба принята! Уведомление выслано на электронный адрес администратору сайта.";                } else {                    var mess = "К сожалению не удалось сохранить уведомление о жалобе.";                }                loader.remove();                new VNotice({                    html: "<p>" + mess + "</p>",                    addClassName: "error",                    css: {"z-index": 10000},                    autoHidden: false,                });            });        }    });});