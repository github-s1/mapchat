/*  *  */define(function(require){    "use strict";        var $ = require('jquery'),        _ = require('underscore'),        KEmoji = require('kemoji'),        Backbone = require('backbone'),        Config = require('config'),        Mark = require('model/Mark'),        User = require('model/User'),        Type = require('model/Type'),         Icon = require('model/Icon'),         Kind = require('model/Kind'),         City = require('model/City'),         Audio = require('model/Audio'),        Comment = require('model/Comment'),        Comments = require('collection/Comments'),        VAuth = require('view/VAuth'),        VAudio = require('view/VAudio'),        VLoader = require('view/VLoader'),        VMapMarkPage = require('view/VMapMarkPage'),        VNotice = require('view/VNotice'),                VMarkAddingPage = require('view/pages/VMarkAddingPage'),        templates = require('templates');        return Backbone.View.extend({                el          : '#markPageWrap',        map         : null,        template    : _.template(templates.markPage),                mode        : "view",                events: {            "click #emoji div[contenteditable]" :       "removePlaceholder",            "blur #emoji div[contenteditable]"  :       "showPlaceholder",            "keypress #emoji div[contenteditable]":     "addComment",            "click button[name='remove']"       :       "removeMark",            "click button[name='specifyType']"  :       "specifyType",            "click button[name='editMark']"     :       "editMark",            "submit form#editMark"              :       "editMark",            "click button[name='cancelEdit']"   :       "cancelEdit",            "click a.hz"                        :       "shareHz",            "click a.fb"                        :       "shareFb",            "click a.vk"                        :       "shareVk",            "click div.photo_block a"           :       "addPhoto",            "change input.photo"                :       "loadPhoto"        },                initialize: function(options) {            this.parent = options.parent;            this.baseModel = this.parent.model;            this.selfUser = this.baseModel.selfUser;            this.markAddingPage = new VMarkAddingPage({parent: this.parent, specifyType: true});            this.parent.removeSidebar();            this.parent.removeMapMain();                        if(!this.el){                this.$el = $("<div id='markPageWrap'></div>").insertAfter($("body>header").first());                this.setElement(this.$el);            }                        this.listenTo(this.selfUser, 'logged:in', this.showEditForm);            this.listenTo(this.selfUser, 'logged:out', this.hideEditForm);                        //this.listenTo(this.markAddingPage, 'changeKind', this.changeKind);            $('body').css({'overflow-y' : 'auto', 'overflow-x' : 'hidden'});        },        // пока не используем        /*changeKind: function(res) {            //console.log(res);            this.model.set(res);            this.render();        },*/        initEmoji: function() {            this.kemoji = KEmoji.init('emoji', {                emojiDir: Config.ImgPath + 'emoji',                smileContainerWidth: 260,                smileContainerHeight: 100            });//            this.kemoji.setValue('Hello, world! $#D83DDE0A#$');        },                saveChanges: function() {            var self = this,                data = {                    id_kind: this.model.get("id_kind"),                    //address: $.trim(this.$("input[name='address']").val()),                    description: $.trim(this.$("textarea[name='description']").val()),                },                loader = new VLoader({                    data: {text: "Сохраняем изменения ... "}                });            this.model.update(data, function(err, res){                loader.remove();                self.cancelEdit();                err = err || res.error;                if(err){                    alert("Не удалось сохранить изменения");                    Backbone.trigger("logger:error", err);                }                else {                    self.model.set({                        //address: data.address,                        description: data.description                    });                }            });        },                editMark: function() {            if(!this.selfUser.hasPrivilegesToEdit(this.model.get("id_user"))){                alert("Вы не можете редактировать этот вид значков");                return;            }                        var text = this.$editButton.text();            if(text === "Редактировать"){                this.$descriptionField.addClass("hide");                //this.$addressField.addClass("hide");                this.$descriptionLabel.removeClass("hide");                this.$addressLabel.removeClass("hide");                                this.$cancelButton.removeClass("hide");                this.$editButton.text("Сохранить");                this.mode = "edit";            }            else {                this.saveChanges();            }        },                cancelEdit: function() {            this.$descriptionField.removeClass("hide");            this.$addressField.removeClass("hide");            this.$descriptionLabel.addClass("hide");            this.$addressLabel.addClass("hide");                        this.$editButton.text("Редактировать");            this.$cancelButton.addClass("hide");            this.mode = "view";        },                create: function(options) {            if(options.appInfo && options.appInfo.markPage){                this.setByPageData(options.appInfo.markPage);            }            else {                this.setByServerData({                    id: options.pageData.id, city: options.pageData.city                });            }        },                set: function(options) {//            console.log(options);            var id = options.pageData.id,                 city = options.pageData.city;            if(!id && _.isObject(options.pageData.mark)){                id = options.pageData.mark.get("id");            }            if(_.isObject(city)){                city = city.get("name_en");            }            this.setByServerData({id: id, city: city});        },                _showPage: function() {            this.render();            this.showMap();            this.showState();            this.model.viewsIncrement();            this.initEmoji();        },                setListening: function() {            this.listenTo(this.model, "change", this._showPage);        },                setByServerData: function(data) {            var self = this;            this.baseModel.getMarkData(data, function(err, res){                if(err){                    Backbone.trigger("logger:error", err);                    self.baseModel.trigger("changePage", {                        pageName: "error", options: {message: err}                    });                }                else {                    self.city = res.city;                    self.model = res.mark;                    self._showPage();                    self.setListening();                }            });        },                setByPageData: function(data) {//            console.log(data);            this.city = new City(data.city);            data.kind.type = new Type(data.type);            data.kind.icon = new Icon(data.icon);            data.mark.kind = new Kind(data.kind);            var comments = [];            if(data.comments && _.isArray(data.comments)){                data.comments.forEach(function(comment){                    comments.push(new Comment(comment));                });            }            data.mark.comments = new Comments(comments);            var audio = null;            if(data.audio && _.isObject(data.audio)){                audio = new Audio(data.audio);            }            data.mark.audio = audio;            var photos = [];            if(data.photos && _.isArray(data.photos)){                data.photos.forEach(function(photo){                    photos.push(photo.name);                });            }            data.mark.photos = photos;            data.mark.points = data.points;            data.mark.user = new User(data.user);            this.model = Mark.create(data.mark);            this._showPage();            this.setListening();        },                removePlaceholder: function() {            if(!this.$placeholder){                this.$placeholder = this.$("span.placeholder").first();            }            if(this.$placeholder && !this.placeholderIsHidden){                this.$placeholder.addClass("hide");                this.placeholderIsHidden = true;            }        },                showPlaceholder: function() {            if(this.$placeholder && this.placeholderIsHidden){                var text  = this.kemoji.getValue();                text = text.replace(/&nbsp;/g, "");                text  = $.trim(text);                if(text === ''){                    this.kemoji.setValue("");                    this.placeholderIsHidden = false;                    this.$placeholder.removeClass("hide");                }            }        },                addComment: function(e) {            if(e.keyCode !== 13) {                return;            }            else if(!this.selfUser.loggedIn()){                new VAuth({parent: this, user: this.selfUser});                return;            }                        var text = this.kemoji.getValue(KEmoji.HTML_VALUE);            if(text === ''){                return;            }            this.kemoji.setValue("");                        var self = this,                comment = new Comment({                    id_mark: this.model.get("id"),                    text: text                });                            comment.save(function(err, res){                if(err){                    alert(err);                }                else {                    _.extend(res, {user: self.selfUser.toJSON()});                    comment.set(res);                    self.model.get('comments').add(comment); //! Добавляем новый комментарий в модель Mark, чтоб при ре-рендеринге отобразились свежие коментарии                    var $comment = self.renderComment(comment);                    self.$comments.prepend($comment);                }            });        },                /**         * Кнопка "убрать на странице значка"         */        removeMark: function(e) {            this.model.spamIncrement(function(res){                new VNotice({                    html: "Ваша заявка принята. Если более 2-х пользователей пожалуются на значок - он не будет отображаться на странице города",                    addClassName: "error",                    css: {"z-index": 10000, "width" : 250},                    autoHidden: false                });                $(e.currentTarget).addClass('hide');            });        },                /**         * Указать вид значка, если вид не был указан изначально         */        specifyType: function() {            this.markAddingPage.selectKind();            console.log("specifyType");        },        shareHz: function(e) {            e.preventDefault();            var url  = 'http://connect.mail.ru/share?';            var pageUrl = encodeURIComponent(window.location);            var title = encodeURIComponent(this.model.get('kind').get('name_ru'));            var description = encodeURIComponent(this.model.get('description'));            this.parent.shareHz(url, pageUrl, title, description);        },        shareFb: function(e) {            e.preventDefault();            var url  = 'http://www.facebook.com/sharer.php?s=100';            var title = encodeURIComponent(this.model.get('kind').get('name_ru'));            var summary = encodeURIComponent(this.model.get('description'));            var pageUrl = encodeURIComponent(window.location);            this.parent.shareFb(url, pageUrl, title, summary);        },        shareVk: function(e) {            e.preventDefault();            var url = 'http://vkontakte.ru/share.php?';            var pageUrl = encodeURIComponent(window.location);            var title = encodeURIComponent(this.model.get('kind').get('name_ru'));            var description = encodeURIComponent(this.model.get('description'));            var image = encodeURIComponent('http://map.taxiavenue.com/img/mark_photos/dps_1.jpg');            this.parent.shareVk(url, pageUrl, title, description, image);        },        renderComment: function(comment) {            var templ = _.template(templates.comment);            return templ({comment: comment});        },                renderComments: function(comments) {            comments.forEach(function(comment){                var $comment = this.renderComment(comment);                this.$comments.prepend($comment);            }, this);        },                renderAudio: function() {            var audio = this.model.get("audio");            if(!audio){                return;            }            this.audio = new VAudio({model: audio});            this.$audioWrap.append(this.audio.$el);        },                renderPhotos: function() {            this.$photoWrap.empty();            var photos = this.model.get("photos");            var countEmpty = 0;            for(var i = 0, length = photos.length; i < length; i++){                var view = _.template(templates.markPagePhoto, {                    data: "data-photo-idx='" + i + "'",                    photo: Config.MarkPhotoPath + photos[i],                                        isSelfUser : this.selfUser.hasPrivilegesToEdit(this.model.get('id_user')),                });                if(view == '') countEmpty++;                    else this.$photoWrap.append(view);            }            if (countEmpty == 3) this.$photoWrap.addClass('hide');        },                render: function() {            var data = this.model.toMarkPage(this.city);            data.hasPrivilegesToEdit = this.selfUser.hasPrivilegesToEdit(this.model.get("id_user"));            this.$el.html(this.template(data));                        this.$audioWrap = this.$("div.audioWrap").first();            this.$editButton = this.$("button[name='editMark']");            this.$cancelButton = this.$("button[name='cancelEdit']");            this.$descriptionField = this.$("p.description").first();            this.$addressField = this.$("p.address").first();            this.$addressLabel = this.$("label.address").first();            this.$descriptionLabel = this.$("label.description").first();            this.$comments = this.$("div.comments").first();            this.$photoWrap = this.$("div.photo_block").first();                        this.renderComments(data.comments);            this.renderPhotos(data.photos);            this.renderAudio();            return this;        },                showEditForm: function() {            if(this.model && this.selfUser.hasPrivilegesToEdit(this.model.get("id_user"))){                this.$("form#editMark").removeClass("hide");            }        },                hideEditForm: function() {            this.$("form#editMark").addClass("hide");        },                showMap: function() {            var mapEl = this.$("section#markMap div").get(0);            this.map = new VMapMarkPage({parent: this, mark: this.model, el: mapEl});        },                showState: function() {            this.parent.showMarkPageState({                city: this.city,                 mark: this.model            });        },                addPhoto: function(e) {            if(!this.selfUser.hasPrivilegesToEdit(this.model.get("id_user"))){                return;            }                        e.preventDefault();            var $link = $(e.currentTarget),                idx = $link.attr("data-photo-idx");//            console.log(idx);            this.$("input[name='position']").val(idx);             this.$("input[name='name']").click();        },                loadPhoto: function(e) {            if(!this.selfUser.hasPrivilegesToEdit(this.model.get("id_user"))){                return;            }                        var files = e.target.files;            if(files.length === 0){                return;            }                        var self = this,                data = new FormData(this.$("form").get(0)),                loader = new VLoader({                    data: {text: "Сохраняем изображение ... "}                });                     this.model.updatePhoto(data, function(err, res){                loader.remove();                                if(err || (res && res.error)){                    err = err || res.error;                    alert("Не удалось сохранить изображение");                    Backbone.trigger("logger:error", err);                }                else {                    self.renderPhotos();                }            });        },                clear: function() {            this.remove();        },                remove: function() {            if(this.map){                this.map.remove();            }            if(this.audio){                this.audio.remove();            }            this.undelegateEvents();            this.stopListening();            this.$el.remove();        }    });});