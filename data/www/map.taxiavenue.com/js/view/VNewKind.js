/*  *  */define(function(require){    "use strict";        var $ = require('jquery'),         _ = require('underscore'),         Dialog = require('dialog'),         Kind = require('model/Kind'),        Backbone = require('backbone'),        VLoader = require('view/VLoader'),        templates = require('templates');        return Backbone.View.extend({                tagName     : 'form',        className   : 'new_kind',        template    : _.template(templates.newKind),                formData    : {            error       : "",            name_ru     : "",            types       : null,            themes      : null,            id_type     : false,            id_theme    : false        },                events: {            "click button.style_butt"       :       "save"        },                initialize: function(options) {            this.parent = options.parent;            this.baseModel = options.model;            this.model = new Kind();            this.createView();        },                createView: function() {            var self = this;            this.baseModel.getDataForNewKind(function(err, res){                if(err){                    Backbone.trigger("logger:error", err);                    return;                }                _.extend(self.formData, res);                self.createDialog();                self.render();            });        },                render: function() {            var view = this.template(this.formData);            this.$el.html(view);        },                createDialog: function() {            var options = {                modal   : true,                title   : "Новый вид значка",                position: "center top",                width   : 320,                height  : 300,                buttons : null            };            this.dialog = new Dialog({widget: this, options: options});        },                setFormData: function() {            _.extend(this.formData, {                name_ru: $.trim(this.$("input[name='name_ru']").val()),                id_type: this.$("select[name='id_type'] option:selected").val(),                id_theme: this.$("select[name='id_theme'] option:selected").val()            });        },                //        checkData: function() {            if(this.formData.name_ru === ""){                throw {                    message: 'Поле "Название" обязательно'                };            }        },                save: function(e) {            e.preventDefault();                        this.setFormData();            try {                this.checkData();            }            catch(e){                this.formData.error = e.message;                this.render();                return;            }                        var self = this,                loader = new VLoader({                    data: {text: "Сохраняем новый вид значка ... "}                 });                        this.model.save(this.formData, function(err, res){                                loader.remove();                if(err){                    alert("Не удалось добавить новый вид значка");                    Backbone.trigger("logger:error", err);                    self.dialog.close();                }                else if(res.error){                    self.formData.error = res.error.error_msg;                    self.render();                }                else {                    self.parent.icons.add(res.icon);                    self.model.set(res.kind);                    self.parent.addNewKind(self.model);                    self.dialog.close();                }                            });        },                clearFormData: function() {            this.formData.error = "";            this.formData.name_ru = "";            this.formData.types.reset();            this.formData.themes.reset();            delete this.formData.types;            delete this.formData.themes;            this.formData.id_type = false;            this.formData.id_theme = false;        },                remove: function() {            this.clearFormData();            this.undelegateEvents();            this.stopListening();            this.$el.remove();        }    });});