/*  *  */define(function(require){    "use strict";        var $ = require('jquery'),        _ = require('underscore'),         Config = require('config'),        AppError = require('appError'),        Backbone = require('backbone');        var User = Backbone.Model.extend({                PASSWORD_MIN_LENGTH: 3,                defaults: {            id: "",            id_avatar: "",            login: "",            name: "",            family: "",            sex: "",            age: "24",            about: "",            anonymous: "0",            date_register: Math.floor(new Date().getTime() / 1000),//            date_register: Date.create().format("{yyyy}-{MM}-{dd} {hh}:{mm}"),            soc_register: null,            telephone: "",            email: "",            city: "",            online: "0",             pass: "",            pass_confirm: "",            big_photo: "avatar.png",            small_photo: "s_avatar.png"        },                initialize: function(data) {            if(data && data.avatar && _.isObject(data.avatar)){                this.set("big_photo", data.avatar.big_photo);                this.set("small_photo", data.avatar.small_photo);            }        },                isAnonymous: function() {            return this.get("anonymous") === "1";        },                hasPrivilegesToEdit: function(id) {            return parseInt(this.get('id'), 10) === parseInt(id, 10);        },                getName: function() {            var name = this.get('name');            if(!name || name === "" || name === "null"){                name = this.get('login');            }            return name;        },                getFullName: function() {            var name = this.get('name'),                family = this.get('family'),                fullName = "";            if(name && name !== "" && name !== "null"){                fullName = name;            }                        if(family && family !== "" && family !== "null"){                if(fullName !== ""){                    fullName += " ";                }                fullName += family;            }                        if(fullName === ""){                fullName = this.get('login');            }            return fullName;        },                getLink: function() {            return Config.baseUrl + "user/" + this.get("id");        },                toMarkPageView: function() {            var data = {};            if(this.isAnonymous()){                data.profileLink = "";                data.name = "Anonymous";                data.avatar = Config.AvatarPath + this.defaults.big_photo;            }            else {                data.profileLink = this.getLink();                data.name = this.getFullName();                data.avatar = Config.AvatarPath + this.get("big_photo");            }            return data;        },                toPageView: function() {            var data = {                bigPhoto: Config.AvatarPath + this.get("big_photo"),                smallPhoto: Config.AvatarPath + this.get("small_photo")            };                        _.extend(data, this.toJSON());            return data;        },                getBigAvatarSrc: function(){            return Config.AvatarPath + this.get("big_photo");        },                getSmallAvatarSrc: function(){            return Config.SmallAvatarPath + this.get("small_photo");        },                toProfilePageView: function() {            var data = this.toJSON();            _.extend(data, {                fullName: this.getFullName(),                bigPhoto: this.getBigAvatarSrc(),                smallPhoto: this.getSmallAvatarSrc()            });                        /*            var data = {                name: this.getFullName(),                bigPhoto: Config.AvatarPath + this.get("big_photo"),                smallPhoto: Config.SmallAvatarPath + this.get("small_photo")            };                        _.extend(data, this.toJSON());            */            return data;        },                remindPassword: function(login) {            return $.ajax({                type: 'POST',                url: Config.baseUrlJSON + "users_json/forgotPassword",                data: {                    login: login                }            });        },                validateAuth: function(data) {            this.validateLoginAuth(data.login);            this.validatePasswordAuth(data.password);        },                validateRegister: function(data) {            this.validateLoginRegister(data.loginRegister);            this.validatePasswordRegister(data.passwordRegister);            if(!data.privacyPolicy){                throw {                    field: "privacyPolicy",                    message: "Не подтверждено согласие с условиями политики конфиденциальности."                };            }        },                validateLoginAuth: function(login) {            if(login === ""){                throw {                    field: "login",                    message: "Не заполнено поле 'Логин'"                };            }        },                validatePasswordAuth: function(password) {            if(password === ""){                throw {                    field: "password",                    message: "Не заполнено поле 'Пароль'"                };            }            if(password.length < this.PASSWORD_MIN_LENGTH){                throw {                    field: "password",                    message: "Поле 'Пароль' должно быть не менее "+this.PASSWORD_MIN_LENGTH+" сим."                };            }        },                validateLoginRegister: function(loginRegister) {            if(loginRegister === ""){                throw {                    field: "loginRegister",                    message: "Не заполнено поле 'Логин'"                };            }        },                validatePasswordRegister: function(passwordRegister) {            if(passwordRegister === ""){                throw {                    field: "passwordRegister",                    message: "Не заполнено поле 'Пароль'"                };            }            if(passwordRegister.length < this.PASSWORD_MIN_LENGTH){                throw {                    field: "passwordRegister",                    message: "Поле 'Пароль' должно быть не менее "+this.PASSWORD_MIN_LENGTH+" сим."                };            }        },                updateAvatar: function(data, callback) {            $.ajax({                type: "POST",                data: data,                context: this,                url: Config.baseUrlJSON + "avatar_json/AddAvatar",                processData: false,  // tell jQuery not to process the data                contentType: false   // tell jQuery not to set contentType            }).done(function(result){//                console.log(result);                result = eval('(' + result + ')');                var avatar = result.response;                this.set({                    id_avatar: avatar.id,                    avatar: avatar,                    big_photo: avatar.big_photo,                    small_photo: avatar.small_photo                });                callback(null, avatar);            })            .fail(function(err){                new AppError({                    data: data,                    inner: err,                    className: "User",                    type: "ServerError",                    methodName: "updateAvatar",                    message: "Не удалось сохранить изображение на сервер"                });            });        },                update: function(data, callback) {            $.ajax({                type: 'POST',                context: this,                url: Config.baseUrlJSON + "users_json/UpdateUserWeb",                data: data            }).done(function(res){                                this.set(res);                callback(null, res);                            }).fail(function(err){                                Backbone.trigger("logger:error", new AppError({                    inner: err,                    data: data,                    type: "ServerError",                    className: "User",                    methodName: "update",                    message: "Не удалось обновить данные пользователя"                }));                callback(err);            });        },                login: function(data) {            return $.ajax({                type: 'POST',                context: this,                url: Config.baseUrlJSON + "auth_json",                data: {                    login: data.login,                    pass: data.password                },                 success: function(data){                    data = eval('(' + data + ')');                    this.setDataForSelfUser(data.response);                }            });        },                register: function(data) {            return $.ajax({                type: 'POST',                url: Config.baseUrlJSON + "register_json",                data: {                    login: data.login,                    pass: data.password                }            });        },                logout: function() {            return $.ajax({                type: 'POST',                context: this,                url: Config.baseUrlJSON + "users_json/logout",                success: function(){                    this.set(this.defaults);                    this.trigger("logged:out");                }            });        },                loggedIn: function() {            var id = parseInt(this.get("id"), 10);            return !isNaN(id);        },                getDataForSelfUser: function() {            $.ajax({                type: "POST",                context: this,                url: Config.baseUrlJSON + "UserAjax/getActiveUser",                success: function(data){//                    console.log(data);                    this.setDataForSelfUser(data.response);                }            });        },                setDataForSelfUser: function(data) {            if(data && !data.error){                this.set(data);                this.trigger("logged:in");            }        }    });        return User;});